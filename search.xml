<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo+appveyor 博客持续集成]]></title>
    <url>%2F2018%2F07%2F10%2Fhexo-appveyor-%E5%8D%9A%E5%AE%A2%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[--- title: hexo+appveyor 博客持续集成 date: 2018-07-10 16:08:30 categories: [博客] tags: [hexo,github pages,appveyor] --- 很早之前就听说过持续集成这个概念,但是一直没有实际操作过,这两天在搭建hexo博客时,幸运地让我再次遇见了它.并且发觉,这次搭建博客就是一个不错的入门机会.最终,在花费了两天的时间之后,终于把脉络打通了. ##### 操作基础:基于hexo,github pages完成博客搭建 主要参考了Google到的文章,本文主题是持续集成,所以不做搭建过程描述. ##### 持续集成的思想 在实现建站的过程中,除了代码的编写,还有实施部署,持续集成(Continuous integration，简称CI)解决的问题在于:它让人们更专注于源码,而将源码编译,部署环境搭建等相对固定的重复性动作通过持续集成进行简化.就本博客的持续集成实现过程来说,只有首次实现持续集成时,才会涉及到环境部署这些内容的操作,而在此之后,我们需要做的,就只有好好的维护源码,对于写博客来说就只有写好博文,然后push到github.后续的操作,持续集成会自行帮你完成. 对于搭建hexo博客来说,CI帮你做的简化是这样的: ​ 当你写完了文章,准备发布到github上,于是你需要:hexo clean & hexo g & hexo d; ​ 而使用了CI之后,你仅需要:git push; 在本文中,CI是通过appveyor提供的服务来完成.叙述过程中会先进行主要过程的描述,文章结尾会对操作过程中的其他问题进行补充描述 ##### 第一步:到 [appveyor ](https://ci.appveyor.com)配置需要实现持续集成的项目 推荐使用github账号直接登入,操作起来会很方便. 完成登录后找到[new project](https://ci.appveyor.com/projects/new)按钮,选择github,然后在右侧的列表中选择你的博客仓库,比如我的是:[forecloud.github.io](https://github.com/forecloud/forecloud.github.io)点击后面的add即可.再回到Project页就可以看到你的项目了,接着在项目名右侧找到设置按钮,进入设置页面 {% asset_img slug 20180710170446.png NEW PROJECT %} {% asset_img slug 20180710171055.png Select repository %} settings部分需要配置的有两块General,Environment 我的仓库设置了两个分支,master和source;master存放生成在public文件夹的静态文件;source存放博客源码.General中设置Default branch,Branches to build两项;都设置成源码分支source {% asset_img slug 20180710174527.png General %} settings部分需要配置的是四个变量: GIT_USER_EMAIL:邮箱 GIT_USER_NAME:用户名 STATIC_SITE_REPO:生成的public文件要提交到的github地址[填写github pages仓库地址即可][比如我的是:https://github.com/forecloud/forecloud.github.io.git(点击仓库的Use HTTPS再copy地址)] TARGET_BRANCH:默认是master (前两个是appveyor自动部署时,将appveyor编译后的文件提交到master分支时要用到,后两个是告诉appveyor你的部署仓库的地址) {% asset_img slug 20180710175622.png Environment %} ##### 第二步:配置access_token 回到你自己的github,点击你头像右侧的下拉按钮,选择[Settings](https://github.com/settings/profile),依次点击[Developer settings](https://github.com/settings/developers) >> [Personal access tokens](https://github.com/settings/tokens) >> [Generate new token](https://github.com/settings/tokens/new) >> 输入**Token description** >> **Select scopes** 部分只选中 ***repo*** ,创建完成后会跳转到[tokens页面](https://github.com/settings/tokens),复制那串字符串 >> 将复制的字符串到appvoyor[加密](https://ci.appveyor.com/tools/encrypt) >> 复制加密后的tokens {% asset_img slug 20180712115148.png Generate new token %} {% asset_img slug 20180712115518.png 复制tokens %} {% asset_img slug 20180712115956.png 复制加密后tokens %} ##### 第三步:设置appveyor.yml 可以直接复制我的配置:[appveyor.yml](https://github.com/forecloud/forecloud.github.io/blob/source/appveyor.yml) 把token改成你刚刚复制的加密后的token就可以了 ##### 第四部：检验CI配置是否起作用 检出你的源码分支 进入到项目根目录，git bash执行命令:npm install hexo-cli --save,为项目安装完成hexo. 修改一个笔记文件并保存 回到git bash 依次执行{git add -A .} {git commit -am 'test'} {git push origin 源码分支名} 再到appveyor首页,点击project,稍等一会,项目会出现console,并输出日志,如果没看到点击项目或者刷新就有了.当你看到Building success就说明构建成功了.但是为了确保万无一失,你应该查看github中master分支中的文章是不是已经变成了你修改后的,源码分支是不是修改后的,如果都是正常的,那么,恭喜你,CI的简单实战就算完成了. {% asset_img slug 20180712121330.png appveyor控制台 %} {% asset_img slug 20180712121531.png 构建成功 %} ##### 操作过程中遇到的其他问题 1.git分支创建,分支切换 2.待续 参考引用: [如何更好地对hexo博客管理](http://feg.netease.com/archives/634.html){提供了整体思路} [appveyor官方文档](https://www.appveyor.com/docs/build-configuration/#configuring-build){建议英文靠谱的同学直接阅读} [使用AppVeyor持续集成本博客](https://liluoao.github.io/2018/use-appveyor-ci.html){参考了appveyor.yml文件的最后几行配置git commit开始}]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
        <tag>appveyor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[datatable使用记录]]></title>
    <url>%2F2018%2F07%2F09%2Fdatatable%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[--- title: datatable使用记录 date: 2018-07-09 10:08:35 categories: [插件] tags: [开发,js,datatable,datatable] --- ## 1.报错:Invalid JSON response ###### 完整报错: ```js DataTables warning: table id=datatable2 - Invalid JSON response. For more information about this error, please see http://datatables.net/tn/1 ``` ###### 解决过程: 1.google发现了[datable报错文档](https://datatables.net/manual/tech-notes/1) 当然,英文的,Google翻译一波后发现并没有什么卵用,但是它提醒我应该多看看控制台 2.查看浏览器控制台,看是否报错,响应是否正常 3.查看后台日志信息,看是否报错 ###### 结果: 原来是我后期修改代码时,新增了字段,但是没有将字段新增到正式系统库,代码更新后,就出现了这个报错,但由于正式服务器我没有操作权限,所以无法查看后台报错,于是查看浏览器,发现datatable发出的两条ajax请求都是响应500,明显是后台发生了报错,所以就去找大佬查看服务器日志了,才发现少了个字段.......尴尬 ###### 反思: 我有个不好的开发习惯,发现报错之后总喜欢马上就去google,完全没有正常的排错思路,寻找可能的原因,这样的第一反应很糟糕,要改.另外,表字段变更及时同步其他数据库,减少那些低级错误造成的困扰.]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>js</tag>
        <tag>datatable</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔记]]></title>
    <url>%2F2018%2F07%2F09%2F%E9%9A%8F%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[--- title: 随笔记 date: 2018-07-09 09:07:56 categories: [思绪] tags: [心情,随笔] --- 1.早上可能是糟糕心情的高发期,不要纠结于小事情,起床气就是小事情,不管是别人的还是自己的,控制自己的起床气,别让它伤人. 2.曾想问你,曾想吻你,曾想拥有你;话在脑海回荡,话在耳边盘旋,话再也说不出去;你是一首歌曲,你是一句诗歌,你是我心底的绝句.用怎样的心跳可以轻巧地送你离去.谈不上放弃,只是偶尔放不下你,只是你那身影,总在我世界里.心里愿送你以千里,从你说离开的那刻起,一月的时光已过去,却还未送走你. 3.人生只要两次幸运就好， 一次遇见你，一次走到底。往后余生，风雪是你，平淡是你，清贫是你。荣华是你，心底温柔是你，目光所至，也是你 ----作者据说是[德卡先生的信箱](https://weibo.com/3163213212/EBRzU6q1r?type=comment) 4.写笔记要及时,要快,因为忘记的很快,所以记得要更快 5.]]></content>
      <categories>
        <category>思绪</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
